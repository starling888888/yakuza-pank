description = "利用可能な設計成果物に基づいて、機能のアクション可能で依存関係順に並べられたtasks.mdを生成します。"

prompt = """
---
description: 利用可能な設計成果物に基づいて、機能のアクション可能で依存関係順に並べられたtasks.mdを生成します。
---

日本語で出力すること。
ユーザー入力は、エージェントから直接提供されるか、コマンド引数として提供されます - プロンプトを進める前に（空でない場合）それを**必ず**考慮に入れる必要があります。

ユーザー入力:

$ARGUMENTS

1. リポジトリのルートから `.specify/scripts/bash/check-prerequisites.sh --json` を実行し、FEATURE_DIRとAVAILABLE_DOCSリストを解析します。すべてのパスは絶対パスである必要があります。
2. 利用可能な設計ドキュメントを読み込んで分析します：
   - 技術スタックとライブラリについては常にplan.mdを読みます
   - 存在する場合：エンティティについてはdata-model.mdを読みます
   - 存在する場合：APIエンドポイントについてはcontracts/を読みます
   - 存在する場合：技術的な決定についてはresearch.mdを読みます
   - 存在する場合：テストシナリオについてはquickstart.mdを読みます

   注：すべてのプロジェクトにすべてのドキュメントがあるわけではありません。例えば：
   - CLIツールにはcontracts/がない場合があります
   - 単純なライブラリにはdata-model.mdが必要ない場合があります
   - 利用可能なものに基づいてタスクを生成します

3. テンプレートに従ってタスクを生成します：
   - `.specify/templates/tasks-template.md` をベースとして使用します
   - 以下に基づいて、サンプルタスクを実際のタスクに置き換えます：
     * **セットアップタスク**: プロジェクトの初期化、依存関係、リンティング
     * **テストタスク[P]**: 契約ごとに1つ、統合シナリオごとに1つ
     * **コアタスク**: エンティティ、サービス、CLIコマンド、エンドポイントごとに1つ
     * **統合タスク**: DB接続、ミドルウェア、ロギング
     * **仕上げタスク[P]**: 単体テスト、パフォーマンス、ドキュメント

4. タスク生成ルール：
   - 各契約ファイル→[P]とマークされた契約テストタスク
   - data-modelの各エンティティ→[P]とマークされたモデル作成タスク
   - 各エンドポイント→実装タスク（共有ファイルの場合は並列ではない）
   - 各ユーザーストーリー→[P]とマークされた統合テスト
   - 異なるファイル=並列可能[P]
   - 同じファイル=順次（[P]なし）

5. 依存関係によってタスクを並べ替えます：
   - すべての前にセットアップ
   - 実装の前にテスト（TDD）
   - サービスの前にモデル
   - エンドポイントの前にサービス
   - 統合の前にコア
   - 仕上げの前にすべて

6. 並列実行の例を含めます：
   - 一緒に実行できる[P]タスクをグループ化します
   - 実際のタスクエージェントコマンドを表示します

7. 以下を含むFEATURE_DIR/tasks.mdを作成します：
   - 実装計画からの正しい機能名
   - 番号付きタスク（T001、T002など）
   - 各タスクの明確なファイルパス
   - 依存関係のメモ
   - 並列実行ガイダンス

タスク生成のコンテキスト：{{args}}

tasks.mdはすぐに実行可能である必要があります - 各タスクは、LLMが追加のコンテキストなしで完了できるほど具体的でなければなりません。
"""