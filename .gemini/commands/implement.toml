description = "tasks.mdで定義されたすべてのタスクを処理および実行して、実装計画を実行します"

prompt = """
---
description: tasks.mdで定義されたすべてのタスクを処理および実行して、実装計画を実行します
---

日本語で出力すること。
ユーザー入力は、エージェントから直接提供されるか、コマンド引数として提供されます - プロンプトを進める前に（空でない場合）それを**必ず**考慮に入れる必要があります。

ユーザー入力:

$ARGUMENTS

1. リポジトリのルートから `.specify/scripts/bash/check-prerequisites.sh --json --require-tasks --include-tasks` を実行し、FEATURE_DIRとAVAILABLE_DOCSリストを解析します。すべてのパスは絶対パスである必要があります。

2. 実装コンテキストを読み込んで分析します：
   - **必須**: 完全なタスクリストと実行計画についてはtasks.mdを読みます
   - **必須**: 技術スタック、アーキテクチャ、およびファイル構造についてはplan.mdを読みます
   - **存在する場合**: エンティティとリレーションシップについてはdata-model.mdを読みます
   - **存在する場合**: API仕様とテスト要件についてはcontracts/を読みます
   - **存在する場合**: 技術的な決定と制約についてはresearch.mdを読みます
   - **存在する場合**: 統合シナリオについてはquickstart.mdを読みます

3. tasks.mdの構造を解析して抽出します：
   - **タスクフェーズ**: セットアップ、テスト、コア、統合、仕上げ
   - **タスクの依存関係**: 順次実行と並列実行のルール
   - **タスクの詳細**: ID、説明、ファイルパス、並列マーカー[P]
   - **実行フロー**: 順序と依存関係の要件

4. タスク計画に従って実装を実行します：
   - **フェーズごとの実行**: 次のフェーズに進む前に各フェーズを完了します
   - **依存関係の尊重**: 順次タスクを順番に実行し、並列タスク[P]は一緒に実行できます  
   - **TDDアプローチに従う**: 対応する実装タスクの前にテストタスクを実行します
   - **ファイルベースの調整**: 同じファイルに影響を与えるタスクは順次実行する必要があります
   - **検証チェックポイント**: 続行する前に各フェーズの完了を確認します

5. 実装実行ルール：
   - **最初にセットアップ**: プロジェクト構造、依存関係、構成を初期化します
   - **コードの前にテスト**: 契約、エンティティ、および統合シナリオのテストを作成する必要がある場合
   - **コア開発**: モデル、サービス、CLIコマンド、エンドポイントを実装します
   - **統合作業**: データベース接続、ミドルウェア、ロギング、外部サービス
   - **仕上げと検証**: 単体テスト、パフォーマンスの最適化、ドキュメント

6. 進捗追跡とエラー処理：
   - 各完了したタスクの後に進捗を報告します
   - 並列でないタスクが失敗した場合は実行を停止します
   - 並列タスク[P]の場合、成功したタスクを続行し、失敗したタスクを報告します
   - デバッグのためにコンテキスト付きの明確なエラーメッセージを提供します
   - 実装が続行できない場合は次のステップを提案します
   - **重要** 完了したタスクについては、タスクファイルでタスクを[X]としてマークオフしてください。

7. 完了検証：
   - すべての必須タスクが完了したことを確認します
   - 実装された機能が元の仕様と一致することを確認します
   - テストが合格し、カバレッジが要件を満たしていることを検証します
   - 実装が技術計画に従っていることを確認します
   - 完了した作業の要約とともに最終ステータスを報告します

注：このコマンドは、tasks.mdに完全なタスクの内訳が存在することを前提としています。タスクが不完全または欠落している場合は、最初に `/tasks` を実行してタスクリストを再生成することをお勧めします。
"""