description = "計画テンプレートを使用して実装計画ワークフローを実行し、設計成果物を生成します。"

prompt = """
---
description: 計画テンプレートを使用して実装計画ワークフローを実行し、設計成果物を生成します。
---

日本語で出力すること。
ユーザー入力は、エージェントから直接提供されるか、コマンド引数として提供されます - プロンプトを進める前に（空でない場合）それを**必ず**考慮に入れる必要があります。

ユーザー入力:

$ARGUMENTS

引数として提供された実装の詳細を考慮して、これを実行してください：

1. リポジトリのルートから `.specify/scripts/bash/setup-plan.sh --json` を実行し、FEATURE_SPEC、IMPL_PLAN、SPECS_DIR、BRANCHのJSONを解析します。今後のすべてのファイルパスは絶対パスである必要があります。
2. 機能仕様を読んで分析し、以下を理解します：
   - 機能要件とユーザーストーリー
   - 機能要件と非機能要件
   - 成功基準と受け入れ基準
   - 記載されている技術的な制約や依存関係

3. `.specify/memory/constitution.md` にある憲法を読み、憲法の要件を理解します。

4. 実装計画テンプレートを実行します：
   - `.specify/templates/plan-template.md` を読み込みます（すでにIMPL_PLANパスにコピーされています）
   - 入力パスをFEATURE_SPECに設定します
   - 実行フロー（メイン）関数ステップ1-9を実行します
   - テンプレートは自己完結型で実行可能です
   - 指定どおりにエラー処理とゲートチェックに従います
   - テンプレートに$SPECS_DIRでの成果物生成をガイドさせます：
     * フェーズ0はresearch.mdを生成します
     * フェーズ1はdata-model.md、contracts/、quickstart.mdを生成します
     * フェーズ2はtasks.mdを生成します
   - 引数からユーザーが提供した詳細を技術コンテキストに組み込みます：{{args}}
   - 各フェーズを完了するたびに進捗追跡を更新します

5. 実行が完了したことを確認します：
   - 進捗追跡ですべてのフェーズが完了したことを確認します
   - 必要なすべての成果物が生成されたことを確認します
   - 実行中にエラー状態がないことを確認します

6. ブランチ名、ファイルパス、および生成された成果物とともに結果を報告します。

パスの問題を回避するために、すべてのファイル操作でリポジトリルートからの絶対パスを使用してください。
"""